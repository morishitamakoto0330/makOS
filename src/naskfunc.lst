     1 00000000                                 ; naskfunc
     2 00000000                                 ; TAB=4
     3 00000000                                 
     4 00000000                                 [FORMAT "WCOFF"]				; オブジェクトファイルを作るモード
     5 00000000                                 [INSTRSET "i486p"]				; 486の命令まで使いたいという記述
     6 00000000                                 [BITS 32]						; 32ビットモード用の機械語を作らせる
     7 00000000                                 [FILE "naskfunc.nas"]			; ソースファイル名情報
     8 00000000                                 
     9 00000000                                 		GLOBAL	_io_hlt, _io_cli, _io_sti, _io_stihlt
    10 00000000                                 		GLOBAL	_io_in8, _io_in16, _io_in32
    11 00000000                                 		GLOBAL	_io_out8, _io_out16, _io_out32
    12 00000000                                 		GLOBAL	_io_load_eflags, _io_store_eflags
    13 00000000                                 		GLOBAL	_load_gdtr, _load_idtr
    14 00000000                                 		GLOBAL	_load_cr0, _store_cr0
    15 00000000                                 		GLOBAL	_load_tr
    16 00000000                                 		GLOBAL	_asm_inthandler20, _asm_inthandler21
    17 00000000                                 		GLOBAL	_asm_inthandler27, _asm_inthandler2c
    18 00000000                                 		GLOBAL	_memtest_sub
    19 00000000                                 		GLOBAL 	_farjmp
    20 00000000                                 		EXTERN	_inthandler20, _inthandler21
    21 00000000                                 		EXTERN	_inthandler27, _inthandler2c
    22 00000000                                 
    23                                          [SECTION .text]
    24 00000000                                 
    25 00000000                                 _io_hlt:						; void io_hlt(void);
    26 00000000 F4                              		HLT
    27 00000001 C3                              		RET
    28 00000002                                 
    29 00000002                                 _io_cli:
    30 00000002 FA                              		CLI						; void io_cli(void);
    31 00000003 C3                              		RET
    32 00000004                                 
    33 00000004                                 _io_sti:
    34 00000004 FB                              		STI						; void io_sti(void);
    35 00000005 C3                              		RET
    36 00000006                                 
    37 00000006                                 _io_stihlt:
    38 00000006 FB                              		STI						; void io_stihlt(void);
    39 00000007 F4                              		HLT
    40 00000008 C3                              		RET
    41 00000009                                 
    42 00000009                                 _io_in8:						; int io_in8(int port);
    43 00000009 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    44 0000000D B8 00000000                     		MOV		EAX,0
    45 00000012 EC                              		IN 		AL,DX
    46 00000013 C3                              		RET
    47 00000014                                 
    48 00000014                                 _io_in16:						; int io_in16(int port);
    49 00000014 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    50 00000018 B8 00000000                     		MOV		EAX,0
    51 0000001D 66 ED                           		IN 		AX,DX
    52 0000001F C3                              		RET
    53 00000020                                 
    54 00000020                                 _io_in32:						; int io_in16(int port);
    55 00000020 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    56 00000024 66 ED                           		IN 		AX,DX
    57 00000026 C3                              		RET
    58 00000027                                 
    59 00000027                                 _io_out8:						; int io_out8(int port, int data);
    60 00000027 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    61 0000002B 8A 44 24 08                     		MOV		AL,[ESP+8]		; data
    62 0000002F EE                              		OUT		DX,AL
    63 00000030 C3                              		RET
    64 00000031                                 
    65 00000031                                 _io_out16:						; int io_out16(int port, int data);
    66 00000031 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    67 00000035 8A 44 24 08                     		MOV		AL,[ESP+8]		; data
    68 00000039 66 EF                           		OUT		DX,AX
    69 0000003B C3                              		RET
    70 0000003C                                 
    71 0000003C                                 _io_out32:						; int io_out16(int port, int data);
    72 0000003C 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    73 00000040 8A 44 24 08                     		MOV		AL,[ESP+8]		; data
    74 00000044 EF                              		OUT		DX,EAX
    75 00000045 C3                              		RET
    76 00000046                                 
    77 00000046                                 _io_load_eflags:				; int io_load_eflags(void);
    78 00000046 9C                              		PUSHFD					; PUSH EFLAGS という意味 
    79 00000047 58                              		POP		EAX
    80 00000048 C3                              		RET
    81 00000049                                 
    82 00000049                                 _io_store_eflags:				; void io_store_eflags(int eflags);
    83 00000049 8B 44 24 04                     		MOV		EAX,[ESP+4]
    84 0000004D 50                              		PUSH 	EAX
    85 0000004E 9D                              		POPFD					; POP EFLAGS という意味
    86 0000004F C3                              		RET
    87 00000050                                 
    88 00000050                                 
    89 00000050                                 _load_gdtr:						; void load_gdtr(int limit, int addr);
    90 00000050 66 8B 44 24 04                  		MOV		AX,[ESP+4]		; limit
    91 00000055 66 89 44 24 06                  		MOV		[ESP+6],AX
    92 0000005A 0F 01 54 24 06                  		LGDT	[ESP+6]
    93 0000005F C3                              		RET
    94 00000060                                 
    95 00000060                                 _load_idtr:						; void load_idtr(int limit, int addr);
    96 00000060 66 8B 44 24 04                  		MOV		AX,[ESP+4]		; limit
    97 00000065 66 89 44 24 06                  		MOV		[ESP+6],AX
    98 0000006A 0F 01 5C 24 06                  		LIDT	[ESP+6]
    99 0000006F C3                              		RET
   100 00000070                                 
   101 00000070                                 _load_cr0:						; int load_cr0(void);
   102 00000070 0F 20 C0                        		MOV		EAX,CR0
   103 00000073 C3                              		RET
   104 00000074                                 
   105 00000074                                 _store_cr0:						; void store_cr0(int cr0);
   106 00000074 8B 44 24 04                     		MOV		EAX,[ESP+4]
   107 00000078 0F 22 C0                        		MOV		CR0,EAX
   108 0000007B C3                              		RET
   109 0000007C                                 
   110 0000007C                                 _load_tr:						; void load_tr(int tr);
   111 0000007C 0F 00 5C 24 04                  		LTR		[ESP+4]			; tr
   112 00000081 C3                              		RET
   113 00000082                                 
   114 00000082                                 _asm_inthandler20:
   115 00000082 06                              		PUSH	ES
   116 00000083 1E                              		PUSH	DS
   117 00000084 60                              		PUSHAD
   118 00000085 89 E0                           		MOV		EAX,ESP
   119 00000087 50                              		PUSH	EAX
   120 00000088 66 8C D0                        		MOV		AX,SS
   121 0000008B 8E D8                           		MOV		DS,AX
   122 0000008D 8E C0                           		MOV		ES,AX
   123 0000008F E8 [00000000]                   		CALL	_inthandler20
   124 00000094 58                              		POP		EAX
   125 00000095 61                              		POPAD
   126 00000096 1F                              		POP		DS
   127 00000097 07                              		POP		ES
   128 00000098 CF                              		IRETD
   129 00000099                                 
   130 00000099                                 _asm_inthandler21:
   131 00000099 06                              		PUSH	ES
   132 0000009A 1E                              		PUSH	DS
   133 0000009B 60                              		PUSHAD
   134 0000009C 89 E0                           		MOV		EAX,ESP
   135 0000009E 50                              		PUSH	EAX
   136 0000009F 66 8C D0                        		MOV		AX,SS
   137 000000A2 8E D8                           		MOV		DS,AX
   138 000000A4 8E C0                           		MOV		ES,AX
   139 000000A6 E8 [00000000]                   		CALL	_inthandler21
   140 000000AB 58                              		POP		EAX
   141 000000AC 61                              		POPAD
   142 000000AD 1F                              		POP		DS
   143 000000AE 07                              		POP		ES
   144 000000AF CF                              		IRETD
   145 000000B0                                 
   146 000000B0                                 _asm_inthandler27:
   147 000000B0 06                              		PUSH	ES
   148 000000B1 1E                              		PUSH	DS
   149 000000B2 60                              		PUSHAD
   150 000000B3 89 E0                           		MOV		EAX,ESP
   151 000000B5 50                              		PUSH	EAX
   152 000000B6 66 8C D0                        		MOV		AX,SS
   153 000000B9 8E D8                           		MOV		DS,AX
   154 000000BB 8E C0                           		MOV		ES,AX
   155 000000BD E8 [00000000]                   		CALL	_inthandler27
   156 000000C2 58                              		POP		EAX
   157 000000C3 61                              		POPAD
   158 000000C4 1F                              		POP		DS
   159 000000C5 07                              		POP		ES
   160 000000C6 CF                              		IRETD
   161 000000C7                                 
   162 000000C7                                 _asm_inthandler2c:
   163 000000C7 06                              		PUSH	ES
   164 000000C8 1E                              		PUSH	DS
   165 000000C9 60                              		PUSHAD
   166 000000CA 89 E0                           		MOV		EAX,ESP
   167 000000CC 50                              		PUSH	EAX
   168 000000CD 66 8C D0                        		MOV		AX,SS
   169 000000D0 8E D8                           		MOV		DS,AX
   170 000000D2 8E C0                           		MOV		ES,AX
   171 000000D4 E8 [00000000]                   		CALL	_inthandler2c
   172 000000D9 58                              		POP		EAX
   173 000000DA 61                              		POPAD
   174 000000DB 1F                              		POP		DS
   175 000000DC 07                              		POP		ES
   176 000000DD CF                              		IRETD
   177 000000DE                                 
   178 000000DE                                 _memtest_sub:							; unsigned int memtest_sub(unsigned int start, unsigned int end)
   179 000000DE 57                              		PUSH 	EDI						; (EBX, ESI, EDI も使いたいので)
   180 000000DF 56                              		PUSH 	ESI
   181 000000E0 53                              		PUSH 	EBX
   182 000000E1 BE AA55AA55                     		MOV		ESI,0xaa55aa55			; pat0 = 0xaa55aa55;
   183 000000E6 BF 55AA55AA                     		MOV		EDI,0x55aa55aa			; pat1 = 0x55aa55aa;
   184 000000EB 8B 44 24 10                     		MOV		EAX,[ESP+12+4]			; i = start;
   185 000000EF                                 mts_loop:
   186 000000EF 89 C3                           		MOV		EBX,EAX
   187 000000F1 81 C3 00000FFC                  		ADD		EBX,0xffc				; p = i + 0xffc;
   188 000000F7 8B 13                           		MOV		EDX,[EBX]				; old = *p;
   189 000000F9 89 33                           		MOV		[EBX],ESI				; *p = pat0;
   190 000000FB 83 33 FF                        		XOR		DWORD [EBX],0xffffffff	; *p ^= 0xffffffff;
   191 000000FE 3B 3B                           		CMP		EDI,[EBX]				; if (*p != pat1) goto fin;
   192 00000100 75 18                           		JNE		mts_fin
   193 00000102 83 33 FF                        		XOR		DWORD [EBX],0xffffffff	; *p ^= 0xffffffff;
   194 00000105 3B 33                           		CMP		ESI,[EBX]				; if (*p != pat0) goto fin;
   195 00000107 75 11                           		JNE		mts_fin
   196 00000109 89 13                           		MOV		[EBX],EDX				; *p = old;
   197 0000010B 05 00001000                     		ADD		EAX,0x1000				; i += 0x1000;
   198 00000110 3B 44 24 14                     		CMP		EAX,[ESP+12+8]			; if (i <= end) goto mts_loop;
   199 00000114 76 D9                           		JBE		mts_loop 
   200 00000116 5B                              		POP 	EBX
   201 00000117 5E                              		POP 	ESI
   202 00000118 5F                              		POP 	EDI
   203 00000119 C3                              		RET
   204 0000011A                                 mts_fin:
   205 0000011A 89 13                           		MOV		[EBX],EDX				; *p = old;
   206 0000011C 5B                              		POP 	EBX
   207 0000011D 5E                              		POP 	ESI
   208 0000011E 5F                              		POP 	EDI
   209 0000011F C3                              		RET
   210 00000120                                 _farjmp:								; void farjmp(int eip, int cs);
   211 00000120 FF 6C 24 04                     		JMP		FAR	[ESP+4]				; eip, cs
   212 00000124 C3                              		RET
   213 00000125                                 
   214 00000125                                 
   215 00000125                                 
   216 00000125                                 
   217 00000125                                 
   218 00000125                                 
   219 00000125                                 
   220 00000125                                 
   221 00000125                                 
   222 00000125                                 
   223 00000125                                 
   224 00000125                                 
   225 00000125                                 
   226 00000125                                 
   227 00000125                                 
